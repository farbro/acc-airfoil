heat_template_version: 2016-04-08

parameters:
  name:
    type: string
  private_network:
    type: string
  image: 
    type: string
  flavor: 
    type: string
  ssh_keys:
    type: comma_delimited_list
  public_network:
    type: string
  username:
    type: string
  pw_hash:
    type: string

resources:
  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming traffic from anywhere.
      name: allow incoming traffic, tcp
      rules: 
        - {direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp}
        - direction: ingress
          protocol: icmp
  server:
    type: OS::Nova::Server
    depends_on: [ server_port, cloud-init-config ]
    properties:
      name: { get_param: name }
      image: { get_param: image } 
      flavor: { get_param: flavor }
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config }
      networks:
        - port: { get_resource: server_port }

  cloud-init-config:
    # cloud init demo resource
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
#        runcmd:
#         - [ /root/install_generic.sh ]
#      write_files:
#        -  content: { get_file: scripts/install_generic.sh }
#           permissions: 0700
#           path: /root/install_generic.sh
#        -  content: { get_file: scripts/install_appserver.sh }
#           permissions: 0700
#           path: /root/install_appserver.sh
        users:
          - name: {get_param: username}
            passwd: {get_param: pw_hash}
            gecos:  Service user
            lock-passwd: false
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash

            ssh-authorized-keys: { get_param: ssh_keys }


  server_port:
    type: OS::Neutron::Port
    depends_on: [ allow_ssh ]
    properties:
      name: main port
      network: { get_param: private_network}
      security_groups:
        - { get_resource: allow_ssh }
        - default

  main_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ server_port ]
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: server_port }
      
  floating_ip_assoc:
    properties:
      floatingip_id: {get_resource: main_floating_ip}
      port_id: {get_resource: server_port}
    type: OS::Neutron::FloatingIPAssociation

outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [server, first_address] }
